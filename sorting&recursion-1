__________________________________________________________________
			Sorting
bubble
insertion
selection

		Bubble sort
Idea: if arr[i] > arr[i+1] swap them. To place the element in their respective position, we have to do the following operation N-1 times. 
time complexity O(n^2)
1 [7 8 3 1 2]

2 [7 3 1 2 8]
3 [3 1 2 7 8]
4 [1 2 3 7 8]
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int[] arr ={7,8,3,1,2};
        //bubble sort
        int i,temp;
        //time complexity=O(n^2)
        for(i=0;i<arr.length-1;i++)
        {
            for(int j=0;j< arr.length-i-1;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
        System.out.println(Arrays.toString(arr));
    }

		Selection Sort
Idea: The inner loop selects the minimum element in the unsorted array and places the elements in increasing order. 
time complexity O(n^2)
[7 8 3 1 2]

[1 8 3 7 2]
[1 2 3 7 8]
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int[] arr ={7,8,3,1,2};
        //selection sort
        int i,temp,smallest;
        //time complexity=O(n^2)
        for(i=0;i<arr.length-1;i++)
        {
            smallest=i;
            for( int j=i+1;j< arr.length;j++)
            {
                if(arr[smallest]>arr[j])
                {
                    smallest=j;
                }
            }
            temp=arr[smallest];
            arr[smallest]=arr[i];
            arr[i]=temp;
        }
        System.out.println(Arrays.toString(arr));
    }
	
	Insertion sort
Idea: Take an element from the unsorted array, place it in its corresponding position in the sorted part, and shift the elements accordingly. 
7 8 3 1 2
[8 7 3 1 2]
[1 3 7 8 2]
[1 2 3 7 8]
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int[] arr ={7,8,3,1,2};
        //insertion sort
        int i,j;
        for(i=1;i<arr.length;i++)
        {
            int current=arr[i];
            j=i-1;
            while(j>=0&& current<arr[j])
            {
                arr[j+1]=arr[j];
                j--;
            }
	   //placement
            arr[j+1]=current;
        }
        System.out.println(Arrays.toString(arr));
    }
_____________________________________________________________
			Recursions
when a function calls itself.
2 things needed base case and statement without base case it will go towards infine recusive calls.

q. print 1-10 series
public static void main(String[] args) {
        printSeries(1);
    }
    public static void printSeries(int n)
    {
        if(n==11)
        {
            return;
        }
        System.out.print(n+" ");
        printSeries(n+1);
    }
//1 2 3 4 5 6 7 8 8 10

q. print 5-1 series
public static void printSeries(int n=5)
{
	if(n==0)
	{
		return;
	}
	else
	{
		sout(n);
		printSeries(n-1);
	}
}
//54321

q. print sum of first n natural numbers 1+2+3....
//main func=1
//base condition=n
//calculate sum
public static void main(String[] args) {
    printSum(1,5,0);
    }
    //1+2+3+4+5=15
    public static void printSum(int i,int n,int sum)
    {
        if(i==n)
        {
            sum=sum+i;
            System.out.println(sum);
            return;
        }
        sum=sum+i;
        printSum(i+1,n,sum);
    }

q. calc factorial of a no
//info
//work
//1. n-1
//2. n*n-1
//base case n==1 return 1
public static void main(String[] args) {
        System.out.println(calcFactorial(5));
    }
    //1+2+3+4+5+6+7+8+9+10
    public static int calcFactorial(int n)
    {
        if (n==1||n==0)
        {
            return 1;
        }
        return n*calcFactorial(n-1);
    }

q. fibonecci series till nth term
//0 1 1 2 3 5 8 ......
1. given 0 1
2. work = create next term c=a+b
3. base case nth term
public static void main(String[] args) {
        int a=0;
        int b=1;
        System.out.println(a);
        System.out.println(b);
        int n=8;
        printFibonecci(a,b,n-2);
    }
    //1+2+3+4+5+6+7+8+9+10
    public static void printFibonecci(int a,int b,int n)
    {
        if (n==0) {
            return;
        }
        int c=a+b;
        System.out.println(c);
        printFibonecci(b,c,n-1);

    }
1. print x^n (stack height =n)
public static void main(String[] args) {
        System.out.println(calcPower(2,4));
    }
    //1+2+3+4+5+6+7+8+9+10
    public static int calcPower(int x,int n)
    {
        if(n==0)
            return 1;
        if(x==0)
            return 0;
        int xPowernm1=calcPower(x,n-1);
        int xPowern=xPowernm1*x;
        return xPowern;
    }
2. print x^n (stack height = logn)
public static void main(String[] args) {
        System.out.println(calcPower(2,4));
    }
    //1+2+3+4+5+6+7+8+9+10
    public static int calcPower(int x,int n)
    {
        if(n==0)
            return 1;
        if(x==0)
            return 0;
        if(n%2==0)
        {
            return calcPower(x,n/2)*calcPower(x,n/2);
        }
        else
        {
            return calcPower(x,n/2)*calcPower(x,n/2)*x;
        }
    }
