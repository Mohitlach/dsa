		StringBuilder
*mutable
declaration
	StringBuilder sb= new StringBuilder("string");
methods:
	charAt(index)
	setCharAt(index,char)
	insert(index,string)
	delete(startindex,endindex)//start inclusive end exclusive
	append(string)
	length()
q1. reverse a string using string builder class:
	    public static void main(String args[])
            {
                String input;
                Scanner sc= new Scanner(System.in);
                System.out.println("enter a string:");
                input=sc.nextLine();
                StringBuilder sb= new StringBuilder(input);
                for(int i=0;i<=sb.length()/2;i++)
                {
                    int front=i;
                    int back=sb.length()-1-i;
                    char frontChar=sb.charAt(front);
                    char backChar=sb.charAt(back);
                    sb.setCharAt(front,backChar);
                    sb.setCharAt(back,frontChar);
                }
                System.out.println(sb);
            }
q2. convert a string to pig latin
rules 
i begin with consonent, consonent goes to end follows with ay
ii begin with vowel yay is added at last
iii no vovel no pig latin
refer question @ https://www.javatpoint.com/pig-latin-program-in-java
    public static void main(String[] args)throws Exception
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter string which you want to convert into pig latin:");
        String input=sc.nextLine();
        String result=toPigLatin(input);
        System.out.println(result);
    }
    public static String toPigLatin(String input)throws Exception
    {
        boolean check=checkVowel(input);
        StringBuilder result= new StringBuilder(input);
        //rule 3
        if(check==false)
        {
            throw new Exception("cant be converted to pig latin..");
        }
        else
        {
            char ch=input.charAt(0);
            if((ch>='a' && ch<='z') || (ch>='A' && ch<='Z'))
            {
                //rule 1
                if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {
                    result.deleteCharAt(0);
                    result.append(ch).append("ay");
                }
                else
                {
                    //rule 2
                    result.append("yay");
                }
            }
        }
        return String.valueOf(result);
    }
    public static boolean checkVowel(String input)
    {
        boolean ans=false;
        for(int i=0;i<input.length();i++)
        {
            char ch= input.charAt(i);
            if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'||ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U')
            {
                ans=true;
                break;
            }
        }
        return ans;
    }

___________________________________________________________________________
				Operators
symbols having specific meaning.
operands: the values in which opertion is performed.
				types
i. unary single operand
increment ++,decrement --
a++,++a	     a--,--a

ii. binary operators (2 operands)
arithmatic +,-,*,/,%
relational >,<,>=,<=,==,!=
logical   &&,||
shortcut +=,-=,*=,/=,%=
bitwise &,|,!,<<,>>,^,~
assignment =

iii. ternary(conditional)
(condition)?(true):(false);
_____________________________________________________________________________
				Number system
decimal (10)=0,1,2,3,4,5,6,7,8,9
octal  (8)=0,1,2,3,4,5,6,7
binary  (2)=0,1
hexadecimal (16)=0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
q. convert decimal to binary
q. convert binary to decimal
    public static void main(String[] args)
    {
        Scanner sc= new Scanner(System.in);
        int num;
        System.out.println("enter a no");
        num=sc.nextInt();
        String binary=toBinary(num);
        System.out.println(binary);
        System.out.println(toInteger(binary));
    }
    public static String toBinary(int num)
    {
        StringBuilder ans=new StringBuilder("");
        int dig;
        while(num!=0)
        {
            dig=num%2;
            ans.append(dig);
            num=num/2;
        }
        return String.valueOf(ans.reverse());
    }
    public static int toInteger(String binary)
    {
        //"1010"
        int i,base=1,ans=0;
        for(i=binary.length()-1;i>=0;i--)//0 1 0 1
        {
            int dig=Character.getNumericValue(binary.charAt(i));
            ans=ans+(dig*base);//2
            base=base*2;//2
        }
        return ans;
    }
____________________________________________________________________
			Bit Manipulation
quick revision
leftshift	right shift
n<<i		n>>i
2<<1		2>>1
010<<1		010>>1
100		001

bitmanipulation
1. get bit
2. set bit 1
3. clear bit 0
4. update bit 1-0

get bit
	*bit mask 1<<i
	*operation and
	get the 3 bit position=2 of a number n.(0101)
	0101
	3210 -> positions
	calc bit mask
		1<<i
		1<<2
		0001<<2
		0100=4 in dec
	operation
	0100
	0101 &
	____
	0100 non zero = 1
	     zero = 0
	program
    public static void main(String[] args)
    {
        int n=5;
        int pos=2;
        int bitMask=1<<2;
        if((bitMask&n)==0)
        {
            System.out.println("bit was 0");
        }
        else
            System.out.println("bit was 1");
    }
set bit
	*bit mask 1<<i
	*or operation
	set the 2nd bit (position=1) of a no n.(n=0101)
	calc bit mask
	1<<1
	0001
	0010
	calc or
	0010
	0101
	____
	0111 
    public static void main(String[] args)
    {
        int n=5;
        int pos=2;
        int bitMask=1<<1;
        int newNumber=bitMask|5;
        System.out.println(newNumber);
    }
clear bit (0 banana)
	*bit mask 1<<i
	*operation and with notbitmask
	clear the 3rd bit (pos2) of a no n(n=0101)
	calc bitmask
	1<<2
	0001
	0100=4
     	~0100=1011
	calc and
	1011
	0101
	____
	0001=1
    public static void main(String[] args)
    {
        int n=5;
        int pos=2;
        int bitMask=1<<pos;
        int notBitMask=~(bitMask);
        int newNumber=notBitMask&n;
        System.out.println(newNumber);
    }
update bit:
	for 0(clear)				for 1(set)
	bit mask 1<<i			bit mask 1<<i
	operation and with not		operation or
	update the 2nd bit position=1 of a number n to 1.(n=0101)
	1<<1
	0001

	0010
	0101
	____ |
	0111
	update the 2nd bit position 1 of a number n to 0.(n=0101)
	1<<1
	0001
	0010
	~(0010)=(1101)

	1101
	0101
	____ &
	0101
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n,pos,value;
        System.out.println("enter a no");
        n=sc.nextInt();
        System.out.println("enter position on which you want to change bit");
        pos=sc.nextInt();
        System.out.println("enter binary value to store at position");
        value=sc.nextInt();
        if(value==1)
        {
            int bitmask=1<<pos-1;
            int newValue=bitmask|n;
            System.out.println("new value is :"+newValue);
        }
        else
        {
            int bitmask=1<<pos-1;
            int notBitmask=~(bitmask);
            int newValue=notBitmask&n;
            System.out.println("new value is:"+newValue);
        }
